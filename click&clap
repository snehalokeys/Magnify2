<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Appreciation</title>

<!-- Fonts (external; still single-file deployable) -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&family=Playfair+Display:ital,wght@0,400;0,700&display=swap" rel="stylesheet">

<style>
  :root{
    --bg:#F7F5F2;
    --text:#222222;
    --accent:#C0A062;
  }
  /* Reset & base */
  html,body{height:100%}
  *{box-sizing:border-box}
  body{
    margin:0;
    background:var(--bg);
    color:var(--text);
    font-family:Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    -webkit-font-smoothing:antialiased;
    -moz-osx-font-smoothing:grayscale;
    line-height:1.6;
  }

  /* Centered single-column layout with 60-character measure */
  .wrap{
    min-height:100vh;
    display:flex;
    align-items:center;
    justify-content:center;
    padding:6vh 20px;
  }
  .card{
    max-width:60ch; /* 60-character measure */
    width:100%;
    text-align:center;
    margin:0 auto;
    padding:clamp(24px,6vh,56px);
  }

  h1{
    margin:0 0 .5rem;
    font-family:"Playfair Display", serif;
    font-weight:400;
    letter-spacing:-0.02em;
    font-size:clamp(28px,4vw,40px);
    color:var(--text);
  }
  p.lead{
    margin:0 0 1.2rem;
    color:var(--text);
    opacity:.85;
    font-size:1rem;
  }
  .hint{
    color:var(--text);
    opacity:.6;
    font-size:.9rem;
    margin-top:1.25rem;
  }

  /* Ripple micro-feedback */
  .ripple{
    position:fixed;
    pointer-events:none;
    width:8px; height:8px;
    border-radius:4px; /* 4px radius as requested */
    transform:translate(-50%,-50%) scale(1);
    background:var(--accent);
    opacity:.9;
    will-change:transform,opacity;
    transition:transform 150ms ease-out, opacity 150ms linear;
    z-index:9000;
  }

  /* Appreciation overlay */
  .appr{
    position:fixed;
    inset:0;
    display:flex;
    align-items:center;
    justify-content:center;
    pointer-events:none;
    z-index:9999;
  }
  .appr .text{
    font-family:"Playfair Display", serif;
    font-weight:400;
    color:var(--accent);
    /* 72pt = 96px; make responsive but honor 96px as max */
    font-size:clamp(36px, 12vw, 96px);
    line-height:1;
    opacity:0;
    transform:translateY(6px);
  }

  /* Fade-in 1s then fade-out 1s (total 2s) */
  @keyframes apprFade {
    0%   {opacity:0; transform:translateY(6px) scale(0.98)}
    50%  {opacity:1; transform:translateY(0) scale(1)}
    100% {opacity:0; transform:translateY(-6px) scale(0.98)}
  }
  .appr.show .text{
    animation:apprFade 2s cubic-bezier(.22,.9,.28,1) forwards;
  }

  /* Ensure responsiveness to 360px */
  @media (max-width:420px){
    .card{ padding:20px; }
  }
</style>
</head>
<body>
  <main class="wrap" id="wrap">
    <div class="card" aria-live="polite">
      <h1>Minimal Gratitude</h1>
      <p class="lead">A quiet page. Click anywhere — earn a small appreciation if you click 10 times rapidly.</p>
      <div class="hint">Soft palette • Playfair &amp; Inter • No sound • Try it — 10 clicks within 2 seconds.</div>
    </div>
  </main>

  <!-- Appreciation element (kept in DOM for perf) -->
  <div class="appr" id="appr" aria-hidden="true">
    <div class="text" id="apprText">Appreciated.</div>
  </div>

<script>
(function(){
  const WINDOW_MS = 2000;    // rolling 2-second window
  const REQUIRED = 10;       // number of clicks required
  let times = [];            // timestamps of recent clicks
  let playing = false;       // is appreciation anim playing

  const body = document.documentElement;
  const appr = document.getElementById('appr');
  const apprText = document.getElementById('apprText');

  // create small ripple at click point
  function makeRipple(x,y){
    const r = document.createElement('span');
    r.className = 'ripple';
    // account for scroll offsets
    const left = x + window.scrollX;
    const top  = y + window.scrollY;
    r.style.left = left + 'px';
    r.style.top  = top  + 'px';
    document.body.appendChild(r);

    // slight scale for a tactile feel
    requestAnimationFrame(()=> {
      r.style.transform = 'translate(-50%,-50%) scale(2)';
      r.style.opacity = '0';
    });

    // remove after 160ms to be safe
    setTimeout(()=> r.remove(), 160);
  }

  // On trigger: show appreciation, reset state
  function triggerAppreciation(){
    if(playing) return;
    playing = true;
    // clear timestamps so user can earn again after the animation
    times = [];
    appr.classList.add('show');
    // after 2s (animation end) hide and allow again
    setTimeout(()=> {
      appr.classList.remove('show');
      playing = false;
    }, 2000);
  }

  // global click handler
  function onClick(e){
    // micro-feedback ripple (no pointer events)
    makeRipple(e.clientX, e.clientY);

    const now = Date.now();
    times.push(now);
    // keep only entries within rolling WINDOW_MS
    const cutoff = now - WINDOW_MS;
    times = times.filter(ts => ts >= cutoff);

    if(times.length >= REQUIRED){
      triggerAppreciation();
    }
  }

  // attach handler to entire document
  document.addEventListener('click', onClick, {passive:true});

  // Small accessibility: allow keyboard activation via Enter/Space on body
  document.addEventListener('keydown', function(e){
    if(e.code === 'Enter' || e.code === 'Space'){
      // emulate a click at center, but still count as a click for the game
      // center coords approximate for ripple
      const cx = window.innerWidth/2;
      const cy = window.innerHeight/2;
      makeRipple(cx,cy);
      const now = Date.now();
      times.push(now);
      const cutoff = now - WINDOW_MS;
      times = times.filter(ts => ts >= cutoff);
      if(times.length >= REQUIRED){
        triggerAppreciation();
      }
      // prevent scrolling on space
      if(e.code === 'Space') e.preventDefault();
    }
  }, {passive:false});

  // Prevent console noise in some environments by not exposing globals
})();
</script>
</body>
</html>